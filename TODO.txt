- refactor tabs code
	- eliminate reference to "expenses" where possible
	- subclass tab content
		- create subclass
		- move concrete DB interaction to subclass
		- move form definition to subclass
		- move table columns definition to subclass
- design UI layout
	- organize import/export links in more usable way
	- style fine tuning
	- organize import/export links in more usable way
- logout ability
- Optimize DB queries (e.g. avoid emiting documents)
- Status tracking
- Income tracking
- Offline mode support
- Configure DB location and store it in browser storage. This would need cross-domain scripting

- development environment scripts currently need manual creation of temporary directories for nginx

- Sort expenses on the client-side
- Full keyboard support
- Lazy initialization of UI parts
- Improve imort from CSV
	- support preserving IDs upon import
	- think about transactionality

Low priority:
- Refactor DateFilterDialog: it should create a link and a dialog as a single component.
- Refactor all dialogs - make sure they are inherited from Dialog, not aggregate dialog object inside of them.
- Scripts for preprocessing DB logic that will allow to upload it without web-interface and write file as plain .js
- Date filter dialog: add ability to resize dialog

